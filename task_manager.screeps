var cpu_tracker = require('cpu_tracker');
var util = require('util');
var cpu_debug = util.cpu_debug;

var globals = require('task_manager.globals');
var outcomes = globals.outcomes;

var task_functions = {
    harvest : function(task, creep) {
        if(creep.is_full())
            return outcomes.AlreadyComplete();

        var selected = Game.getObjectById(task.selected_source_id);
        if(!selected) {
            selected = creep.pos.findClosestByRange(FIND_SOURCES, {
                filter: function(src) {
                    return src.is_harvestable(creep);
            }});
            if(selected) {
                task.selected_source_id = selected.id;
            }
        }
        if(!selected) {
            if(!task.no_resupply) {
                return new outcomes.PushTask({type: "resupply"});
            } else {
                return new outcomes.Failure("No sources found.");
            }
        }
        var rc = creep.harvest(selected);
        switch(rc) {
            case ERR_NOT_OWNER:
            case ERR_BUSY:
            case ERR_NOT_FOUND:
            case ERR_INVALID_TARGET:
            case ERR_NO_BODYPART:
                return new outcomes.TaskError(rc);

            case ERR_NOT_IN_RANGE:
                if(selected.is_harvestable(creep)) {
                    creep.moveTo(selected);
                    return new outcomes.InProgress();
                } else {
                    task.selected_source_id = null;
                    return new outcomes.Rerun();
                }
            case OK:
                return new outcomes.InProgress();
            case ERR_NOT_ENOUGH_RESOURCES:
                task.selected_source_id = null;
                return new outcomes.Rerun();
        }
    },
    construct : function(task, creep) {
        var resupply = task.resupply;
        var target = Game.getObjectById(task.target_id);

        if(!creep.body_part_count(WORK, true))
            return new outcomes.Failure("No WORK parts.");
        if(!creep.body_part_count(CARRY, true))
            return new outcomes.Failure("No CARRY parts.");

        if(!target) {
            if(task.mode == "build") {
                return new outcomes.AlreadyComplete();
            } else {
                return new outcomes.Failure("Target not found.");
            }
        }
        if(creep.carry.energy == 0) {
            if(resupply) {
                return new outcomes.PushTask({type: resupply});
            } else {
                return new outcomes.Failure("No energy, resupply disabled.");
            }
        }
        var rc;
        if(typeof target.progress == 'undefined') {
            task.mode = "repair";
            if(target.hits == target.hitsMax) {
                return new outcomes.AlreadyComplete();
            }
            rc = creep.repair(target);
        } else {
            // autorepair can intefere with our construction
            task.mode = "build";
            creep.cancelOrder("repair");
            rc = creep.build(target);
        }
        switch(rc) {
            case ERR_NOT_OWNER:
            case ERR_BUSY:
            case ERR_NOT_ENOUGH_RESOURCES:
            case ERR_INVALID_TARGET:
            case ERR_NO_BODYPART:
            case ERR_RCL_NOT_ENOUGH:
                return new outcomes.TaskError(rc);
            case ERR_NOT_IN_RANGE:
                creep.moveTo(target);
            case OK:
                return new outcomes.InProgress();
        }
    },
    resupply : function(task, creep) {
        var remaining_capacity = creep.carryCapacity - _.sum(creep.carry);
        if(creep.is_full()) {
            return new outcomes.AlreadyComplete();
        }
        var gas_station = Game.getObjectById(task.gas_station_id);
        if(!gas_station) {
            var stypes = [STRUCTURE_CONTAINER, STRUCTURE_STORAGE];
            var possible_stations = creep.room.find(FIND_STRUCTURES, {
                filter: function(st) {
                    return st.is_type(stypes) && st.store[RESOURCE_ENERGY];
            }});
            var energies = creep.room.find(FIND_DROPPED_ENERGY);
            possible_stations = possible_stations.concat(energies);
            if(possible_stations.length) {
                gas_station = creep.pos.findClosestByRange(possible_stations);
                if(gas_station.structureType) {
                    task.gas_station_id = gas_station.id;
                } else {
                    var task = {type: "pickup", target_id: gas_station.id};
                    return new outcomes.PushTask(task);
                }
            }
        }
        if(!gas_station) {
            var task = {type: "harvest", timeout: 30, no_resupply: true}
            return new outcomes.PushTask(task);
        }
        var rc = creep.withdraw(gas_station, RESOURCE_ENERGY);
        if(rc == ERR_NOT_IN_RANGE) {
            creep.moveTo(gas_station);
            return new outcomes.InProgress();
        } else if(rc == ERR_NOT_ENOUGH_RESOURCES) {
            task.gas_station_id = null
            return new outcomes.Rerun();
        } else if(rc != OK) {
            creep.say("rs!" + rc);
            return new outcomes.InProgress();
        } else {
            return new outcomes.Complete();
        }
    },
    renew : function(task, creep) {
        if(creep.ticksToLive >= 1400) {
            return new outcomes.AlreadyComplete();
        }
        var spawn = Game.getObjectById(task.spawn_id);
        if(!spawn) {
            var spawns = [];
            for(var i in Game.spawns)
                spawns.push(Game.spawns[i]);
            spawn = creep.pos.findClosestByRange(spawns);
            if(spawn)
                task.spawn_id = spawn.id
        }
        if(!spawn)
            return outcome.Failure("No nearby spawn found.");

        var rc = spawn.renewCreep(creep)
        creep.transfer(spawn, RESOURCE_ENERGY);
        switch(rc) {
            case ERR_INVALID_TARGET:
            case ERR_NOT_OWNER:
                return outcome.TaskError(rc);
            case OK:
            case ERR_BUSY:
                return outcome.InProgress();
            case ERR_NOT_ENOUGH_ENERGY:
                return outcome.Failure("Spawn has not enough energy.");
            case ERR_FULL:
                return outcome.AlreadyComplete();
            case ERR_NOT_IN_RANGE:
                creep.moveTo(spawn)
                return outcome.InProgress();
        }
    },
    transfer_to : function(task, creep) {
        // Low level task; creep to navigate to target or destination
        // (once in destination room, look for a suitable structure, if
        // none found, choose the floor), and then transfer as much as
        // possible of the resource type
        var target = Game.getObjectById(task.target_id);
        var destination = util.memoryPosition(task.destination_pos);
        var resource_type = task.resource_type || RESOURCE_ENERGY;
        var amount = task.amount;

        if(!target && !destination)
            return new outcomes.TaskError("No target or destination.");

        if(!creep.carry[resource_type])
            return new outcomes.TaskError("Creep not carrying " + resource_type);

        if(typeof amount != 'undefined') {
            amount = max(creep.carry[resource_type], amount);
            task.amount = amount;
        }

        if(!target) {
            if(destination.roomName == creep.room.name) {
                var look = destination.look(LOOK_STRUCTURES);
                for(var i in look) {
                    var st = look[i];
                    var rc = creep.transfer(st, resource_type, amount);
                    if(rc == ERR_INVALID_TARGET) {
                        continue;
                    } else {
                        target = st;
                        task.target_id = target.id;
                        break;
                    }
                }
                if(!target)
                    var msg = "No target found at destination.";
                    return new outcomes.TaskError(msg);
            } else {
                creep.moveTo(destination);
                return new outcomes.InProgress();
            }
        }
        task.destination_pos = target.pos;
        var rc = creep.transfer(target, resource_type, amount);
        switch(rc) {
            case ERR_NOT_OWNER:
            case ERR_BUSY:
            case ERR_NOT_ENOUGH_RESOURCES:
            case ERR_INVALID_ARGS:
            case ERR_INVALID_TARGET:
                return new outcomes.TaskError(rc);
            case ERR_FULL:
                return new outcomes.AlreadyComplete();
            case ERR_NOT_IN_RANGE:
                creep.moveTo(target);
                return new outcomes.InProgress();
            case OK:
                return new outcomes.Complete();
        }
    },
    tower_target : function(task, tower) {
        target = Game.getObjectById(task.target_id);
        mode = task.mode;
        // The task timing out is done by the task manager.
        if(!target)
            return new outcomes.Failure("No target.");

        if(!mode)
            return new outcomes.TaskError("No mode.");

        if(tower.energy < TOWER_ENERGY_COST)
            return new outcomes.InProgress();

        var rc;
        switch(mode) {
            case "heal":
                if(target.hits == target.hitsMax) {
                    return new outcomes.AlreadyComplete();
                }
                rc = tower.heal(target);
                break;
            case "repair":
                if(target.hits == target.hitsMax) {
                    return new outcomes.AlreadyComplete();
                }
                rc = tower.repair(target);
                break;
            case "attack":
                rc = tower.attack(target);
                break;
            default:
                return new outcomes.TaskError("Bad mode " + mode);
        }
        switch(rc) {
            case ERR_INVALID_TARGET:
            case ERR_RCL_NOT_ENOUGH:
            case ERR_NOT_ENOUGH_RESOURCES:
                return new outcomes.TaskError(rc);
            case OK:
                return new outcomes.InProgress();
        }
    },
    dismantle : function(task, creep) {
        creep.add_flag("no_autopickup");
        var target = Game.getObj
        var amount = task.amount;

        if(!target && !destination)
            return new outcomes.TaskError("No target or destination.");

        if(!creep.carry[resource_type])
            return new outcomes.TaskError("Creep not carrying " + resource_type);

        if(typeof amount != 'undefined') {
            amount = max(creep.carry[resource_type], amount);
            task.amount = amount;
        }

        if(!target) {
            if(destination.roomName == creep.room.name) {
                var look = destination.look(LOOK_STRUCTURES);
                for(var i in look) {
                    var st = look[i];
                    var rc = creep.transfer(st, resource_type, amount);
                    if(rc == ERR_INVALID_TARGET) {
                        continue;
                    } else {
                        target = st;
                        task.target_id = target.id;
                        break;
                    }
                }
                if(!target)
                    var msg = "No target found at destination.";
                    return new outcomes.TaskError(msg);
            } else {
                creep.moveTo(destination);
                return new outcomes.InProgress();
            }
        }
        task.destination_pos = target.pos;
        var rc = creep.transfer(target, resource_type, amount);
        switch(rc) {
            case ERR_NOT_OWNER:
            case ERR_BUSY:
            case ERR_NOT_ENOUGH_RESOURCES:
            case ERR_INVALID_ARGS:
            case ERR_INVALID_TARGET:
                return new outcomes.TaskError(rc);
            case ERR_FULL:
                return new outcomes.AlreadyComplete();
            case ERR_NOT_IN_RANGE:
                creep.moveTo(target);
                return new outcomes.InProgress();
            case OK:
                return new outcomes.Complete();
        }
    },
    tower_target : function(task, tower) {
        target = Game.getObjectById(task.target_id);
        mode = task.mode;
        // The task timing out is done by the task manager.
        if(!target)
            return new outcomes.Failure("No target.");

        if(!mode)
            return new outcomes.TaskError("No mode.");

        if(tower.energy < TOWER_ENERGY_COST)
            return new outcomes.InProgress();

        var rc;
        switch(mode) {
            case "heal":
                if(target.hits == target.hitsMax) {
                    return new outcomes.AlreadyComplete();
                }
                rc = tower.heal(target);
                break;
            case "repair":
                if(target.hits == target.hitsMax) {
                    return new outcomes.AlreadyComplete();
                }
                rc = tower.repair(target);
                break;
            case "attack":
                rc = tower.attack(target);
                break;
            default:
                return new outcomes.TaskError("Bad mode " + mode);
        }
        switch(rc) {
            case ERR_INVALID_TARGET:
            case ERR_RCL_NOT_ENOUGH:
            case ERR_NOT_ENOUGH_RESOURCES:
                return new outcomes.TaskError(rc);
            case OK:
                return new outcomes.InProgress();
        }
    },
    dismantle : function(task, creep) {
        creep.add_flag("no_autopickup");
        var target = Game.getObjectById(task.target_id);
        if(!target)
            return new outcomes.Failure("No target found.");

        if(creep.is_full()) {
            var task = {type: "deposit"}
            return new outcomes.PushTask(task);
        }
        var rc = creep.dismantle(target);
        switch(rc) {
            case ERR_NOT_IN_RANGE:
                creep.moveTo(target);
                return new outcomes.InProgress();
            case OK:
                return new outcomes.Complete();
            default:
                return new outcomes.TaskError(rc);
        }
    },
    leave_location : function(task, creep) {
        var pos = util.memoryPosition(task.pos);
        if(creep.pos.isEqualTo(pos)) {
            creep.say("Aaaaaa!");
            creep.move(Math.floor((Math.random() * 8) + 1));
            return new outcomes.InProgress();
        } else {
            return new outcomes.AlreadyComplete();
        }
    },
    move_to: function(task, creep) {
        var target = Game.getObjectById(task.target_id);
        var destination;
        if(target) {
            destination = target.pos;
        } else {
            destination = util.memoryPosition(task.destination_pos);
        }
        if(!destination) {
            return new outcomes.TaskError("No destination found.");
        }
        if(creep.pos.isEqualTo(destination)) {
            return new outcomes.AlreadyComplete();
        }
        var rc = creep.moveTo(destination);
        if(rc == ERR_NO_PATH) {
            return new outcomes.Failure("No path found.");
        } else {
            return new outcomes.InProgress();
        }
    },
    suicide: function(task, creep) {
        creep.suicide();
        return new outcomes.Complete();
    },
    recycle: function(task, creep) {
        var spawn = Game.getObjectById(task.spawn_id);
        if(!spawn) {
            var spawns = [];
            for(var name in Game.spawns) {
                spawns.push(Game.spawns[name]);
            }
            spawn = creep.pos.findClosestByPath(spawns);
            if(spawn)
                task.spawn_id = spawn.id;
        }
        if(!spawn) {
            creep.suicide();
            return new outcomes.Complete();
        }
        var rc = spawn.recycleCreep(creep);
        if(rc == ERR_NOT_IN_RANGE) {
            creep.moveTo(spawn);
            return new outcomes.InProgress();
        } else {
            return new outcomes.Complete();
        }
    },
    pickup : function(task, creep) {
        if(creep.is_full()) {
            return new outcomes.AlreadyComplete();
        }
        var target = Game.getObjectById(task.target_id);
        if(!target) {
            return new outcomes.Failure("No target found.");
        }
        var rc = creep.pickup(target);
        // TODO turn into a proper switch
        if(rc == ERR_NOT_IN_RANGE) {
            creep.moveTo(target);
            return new outcomes.InProgress();
        } else if(rc == ERR_INVALID_TARGET) {
            return new outcomes.Failure(rc);
        } else {
            return new outcomes.Complete();
        }
    },
    travel_to_room : function(task, creep) {
        var destination_room = task.destination_room;
        var current_room = creep.room.roomName;
        if(!destination_room)
            return new outcomes.TaskError("No room given.")

        if(current_room == destination_room)
            return new outcomes.AlreadyComplete();

        if(!task.route) {
            rc = Game.map.findRoute(current_room, destination_room);
            if(rc == ERR_NO_PATH) {
                return new outcomes.Failure("No path to destination.");
            }
            task.route = rc;
            task.route_index = 0;
        }
        /* The return value from findRoute is the following format:
            [
                {"exit": dir1, "room": "room1"},
                {"exit": dir2, "room": "room2"},
                ...
                {"exit": dirN, "room": destination_room}
            ]
        */
        var step = task.route[task.route_index];
        task.route_index += 1;

        var exit_dir = step["exit"];
        var next_room = step["room"];

        var closest_exit = creep.pos.findClosestByPath(exit_dir);
        if(closest_exit) {
            var new_task = {
                type: "move_to_exit",
                destination: closest_exit,
                destination_room: next_room
            };
            return new outcomes.PushTask(new_task);
        } else {
            return new outcomes.Failure("No path to exit.");
        }
    },
    move_to_exit : function(task, creep) {
        // Low level task for moving to another
        // room, via a provided exit in the creep's current room.
        // Should work with portals.
        // Use of move_to won't work because of how exits immediately
        // transport you to another room.
        var destination = util.memoryPosition(task.destination);
        var destination_room = task.destination_room;
        var current_room = creep.room.name;
        if(destination_room == current_room || creep.pos == destination)
            return new outcomes.AlreadyComplete();

        if(!destination || !destination_room ||
            destination.roomName != current_room)
            //
            return new outcomes.TaskError("Invalid destination/room");
        creep.moveTo(destination);
        return outcomes.InProgress();
    },
    taskless : function(task, creep) {
        // TODO should rendevous with nearest spawn and have them assign
        var can_work = creep.body_part_count(WORK);
        var can_carry = creep.body_part_count(CARRY);
        var can_claim = creep.body_part_count(CLAIM);
        var purpose;
        if(can_claim) {
            purpose = "role.claimer";
        } else if(!can_work && !can_carry) {
            purpose = "role.dumbscout";
        } else if(can_work && !can_carry) {
            purpose = "role.cow";
        } else if(!can_work && can_carry) {
            purpose = "role.supplier";
        } else {
            purpose = _.sample(["role.supplier","role.cow","role.upgrader",
                "role.builder"]);
        }
        return new outcomes.ReplaceTask({type: purpose});
    },
    idle: function(task, creep) {
        return new outcomes.InProgress();
    },
    deposit : function(task, creep) {
        // A high level task; the creep is carrying resources, and
        // wants to deposit them in a room.
        var resource_type = task.resource_type || RESOURCE_ENERGY;
        if(creep.is_empty())
            return new outcomes.AlreadyComplete();

        var target_room = task.target_room;

        if(!target_room) {
            var my_spawn = creep.get_support();
            if(!my_spawn)
                my_spawn = _.sample(Game.spawns);
            if(!my_spawn)
                return new outcomes.TaskError("No spawns exist.");
            target_room = my_spawn.room.name;
            task.target_room = target_room;
        }

        if(my_spawn.room.name != creep.room.name) {
            var new_tas

        };

        var target = creep.pos.findClosestByRange(storages);

        if(target) {
            var new_task = {
                type: "transfer_to",
                target_id: target.id,
                resource_type: resource_type
            };
            return new outcomes.PushTask(new_task);
        } else {
            creep.drop(resource_type);
            return new outcomes.TaskError("Could not find storage.");
        }

    }
}
module.exports = {
    globals: require('task_manager.globals'),
    task_functions: task_functions,
    register: function(name, func) {
        task_functions[name] = func;
    },
    run_task_queue: function(owner, tq) {
        var sanity = 100;
        while(tq && tq.length && sanity > 0) {
            sanity--;
            var task = tq[0];
            if(typeof task.times_run == 'undefined') {
                task.times_run = 0
            }
            var ttype = task.type;

            var outcome;
            var t1 = cpu_tracker.start("tasks", ttype);

            var func = task_functions[ttype];
            if(func) {
                try {
                    outcome = func(task, owner);
                } catch(err) {
                    console.log(err.stack);
                    outcome = new outcomes.TaskError("Exception: " + err);
                }
            } else {
                outcome = new outcomes.TaskError("No handler for task type.");
            }
            cpu_tracker.stop(t1);

            if(outcome && outcome.outcome)
                outcome = new outcomes.TaskError("Outcome is old format.");

            if(!outcome) {
                outcome = new outcomes.TaskError("No outcome returned.");
            };

            if(task.times_run >= task.timeout)
                outcome.pop = true;

            if(outcome.pop)
                owner.pop_task();

            if(outcome.increment)
                task.times_run += outcome.increment;

            if(outcome.push)
                owner.add_task(outcome.push);

            if(outcome.warning)
                owner.warning("task", outcome.warning);

            if(outcome.error) {
                // Make a detailed console message.
                var msg = "Task(" + ttype + "): " + outcome.error;
                console.log(msg);
                owner.error("task", msg);
            }

            if(outcome.stop) {
                break;
            } else {
                continue;
            }
        }
        if(sanity == 0)
            cpu_debug("Task queue sanity timed out for " + owner);
    }
}
