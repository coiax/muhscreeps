function needs_energy(st) {
    if(!st.isActive())
        return false;
    if(st.store) {
        var total = _.sum(st.store);
        return total < st.storeCapacity;
    } else {
        if(typeof st.energy == 'undefined')
            return false;
        if(typeof st.energyCapacity == 'undefined')
            return false;
        return st.energy < st.energyCapacity;
    }
};

function is_damaged(obj) {
    if(typeof obj.hits == 'undefined')
        return false;
    if(typeof obj.hitsMax == 'undefined')
        return false;
    return obj.hits < obj.hitsMax;
};

function cpulog(msg) {
    console.log(Game.cpu.getUsed() + " " + msg);
};

function mean(arr) {
    return _.sum(arr) / arr.length;
}

function standard_deviation_and_mean(arr) {
    var avg = mean(arr);
    var sum = 0;
    arr.forEach(function(num) {
        sum += Math.pow(num - avg, 2);
    });
    sum /= arr.length;
    var std = Math.pow(sum, 0.5);
    return {avg: avg, std: std};
}

function room_walk(roomname, func, opts) {
    var maximum_depth = (opts && opts.maximum_depth) || 10;
    // given a roomname, walk along the map, running func on each room
    // encountered, returning the first roomname that func returns
    // true for.
    var depth = 0;
    var visited_rooms = {};
    var room_list = [roomname];
    var matching_rooms = [];
    var next_list = [];
    while((matching_rooms.length == 0) && (depth < maximum_depth)) {
        room_list.forEach(function(rn) {
            if(visited_rooms[rn])
                return;
            visited_rooms[rn] = true;
            if(func(depth, rn)) {
                matching_rooms.push(rn);
            } else {
                exits = Game.map.describeExits(rn);
                for(var dir in exits) {
                    var other_rn = exits[dir];
                    if(!visited_rooms[other_rn])
                        next_list.push(other_rn);
                }
            }
        });
        depth++;
        room_list = next_list;
        next_list = [];
    }
    return matching_rooms;
}

module.exports = {
    room_walk: room_walk,
    opposite_dir: function(dir) {
        var num = dir + 4;
        if(num > 8)
            num = num - 8;
        return num;
    },
    body_cost: function(body) {
        var sum = 0;
        body.forEach(function(part) {
            sum += BODYPART_COST[part];
        });
        return sum;
    },

    needs_energy: needs_energy,
    is_damaged: is_damaged,
    cpulog: cpulog,
    mean: mean,
    standard_deviation_and_mean: standard_deviation_and_mean,
    memoryPosition: function(obj) {
        if(obj) {
            return new RoomPosition(obj.x, obj.y, obj.roomName);
        } else {
            return null;
        }
    },
    get_creeps_with_task: function(creeps, ttype) {
        return _.filter(creeps, function(creep) {
            return creep.has_task_in_queue(ttype);
        });
    },
    keep_n_values: function(L, N) {
        if(L && (L.length > N))
            L.splice(0, L.length - N);
    },
    cpu_debug: function cpu_debug(msg) {
        if(Memory.config.cpu_debug)
            console.log(Game.cpu.getUsed() + ": " + msg);
    }
}
