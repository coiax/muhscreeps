var util = require('util');

function setup() {
    if(!Memory.cpu)
        Memory.cpu = {enabled: false, values_kept: 1000};
    if(typeof Memory.cpu.enabled == 'undefined')
        Memory.cpu.enabled = false;
    if(!Memory.cpu.values_kept)
        Memory.cpu.values_kept = 1000;
};

function add_value(values, obj) {
    values.push(obj)

    if(values.length > Memory.cpu.values_kept)
        values.splice(0, values.length - Memory.cpu.values_kept);
}

function calculate_average(values) {
    var sum = 0;
    if(!values) {
        return 0
    } else {
        values.forEach(function(obj) {
            sum += obj.used
        });
        return sum / values.length;
    }
}

function record(obj, used) {
    var time = Game.time;
    if(!obj.values)
        obj.values = []
    add_value(obj.values, {time:time, used:used})
    var used_arr = _.map(obj.values, _.property('used'))
    obj.last = used;
};

var paths = new Set();

function record_arbitary(arbitary, name, cpu_use) {
    setup();
    if(!Memory.cpu.enabled)
        return;
    if(!Memory.cpu[arbitary])
        Memory.cpu[arbitary] = {};
    if(!name) {
        paths.add(arbitary);
        record(Memory.cpu[arbitary], cpu_use);
    } else {
        paths.add(arbitary + "." + name);
        if(!Memory.cpu[arbitary][name])
            Memory.cpu[arbitary][name] = {};
        record(Memory.cpu[arbitary][name], cpu_use);
    }
};


function start(arbitary, task_name) {
    var timer_obj = {};
    timer_obj.time_started = Game.cpu.getUsed();
    timer_obj.arbitary = arbitary;
    timer_obj.task_name = task_name;
    return timer_obj;
}

function stop(timer_obj) {
    var time_stopped = Game.cpu.getUsed();
    if(timer_obj && (typeof timer_obj.time_started != 'undefined') &&
        (typeof timer_obj.arbitary != 'undefined') &&
        (typeof timer_obj.task_name != 'undefined')) {
        //
        var total_time = time_stopped - timer_obj.time_started;
        record_arbitary(timer_obj.arbitary, timer_obj.task_name, total_time);
    }
}

module.exports = {
    record_arbitary : record_arbitary,
    record_main : function() {
        return record_arbitary("main", null, Game.cpu.getUsed());
    },
    record_task : function(task_name, cpu_use) {
        return record_arbitary("tasks", task_name, cpu_use);
    },
    calculate : function() {
        console.log(JSON.stringify(paths.keys()));
    }
};
