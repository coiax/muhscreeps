require('loaded_modules');
var gc = require('gc');
var cpu_tracker = require('cpu_tracker');
var task_manager = require('task_manager');
var util = require('util');

function cpu_debug(msg) {
    if(Memory.cpu_debug) {
        console.log(Game.cpu.getUsed() + ": " + msg);
    }
}

module.exports.loop = function () {
    var t1 = cpu_tracker.start("internal", "memory_decode");
    Memory;
    cpu_tracker.stop(t1);
    if(Memory.just_exit) {
        return;
    }

    cpu_debug("Start mainloop");

    var t2 = cpu_tracker.start("internal", "gc");
    gc.gc();
    cpu_tracker.stop(t2);

    var t3 = cpu_tracker.start("global", "scouting");
    for(var roomName in Game.rooms) {
        cpu_debug("Scouting " + roomName);
        var room = Game.rooms[roomName];
        room.scout_room();
    }
    cpu_tracker.stop(t3);

    for(var sid in Game.structures) {
        var structure = Game.structures[sid];
        if(!structure.isActive()) {
            continue;
        }
        var memory = structure.get_memory();
        var stype = structure.structureType;
        cpu_debug("Running tasks for " + sid + "(" + stype + ")");
        var tq = memory.task_queue;
        if(!tq || !tq.length) {
            switch(stype) {
                case STRUCTURE_TOWER:
                    structure.add_task({type: "structure.tower"});
                    break;
                case STRUCTURE_SPAWN:
                    structure.add_task({type: "structure.spawner"});
                    break;
            }
        }
        if(memory.task_queue && memory.task_queue.length)
            task_manager.run_task_queue(structure, tq);
    }
    for(var name in Game.creeps) {
        var creep = Game.creeps[name];
        cpu_debug("Running tasks for " + name);
        if(creep.spawning) {
            continue;
        }
        var dropped_energies = creep.room.find(FIND_DROPPED_ENERGY);
        dropped_energies.forEach(function(energy) {
            // might fail, just pickup anything if you can.
            creep.pickup(energy);
        });
        // casual driveby repair.
        if(creep.carry.energy && !creep.memory.no_driveby_repair) {
            var damaged_structures = creep.pos.findInRange(FIND_STRUCTURES,
                3, {filter: function(st) {
                    return (util.is_damaged) &&
                        ((st == STRUCTURE_ROAD) && (st == STRUCTURE_CONTAINER))
                }});
            damaged_structures = _.sortBy(damaged_structures,
                _.property("hits"));
            if(damaged_structures.length) {
                creep.repair(damaged_structures[0]);
            }
        }

        if(creep.wants_renew())
            creep.add_task({type:"renew"});

        if(!creep.has_tasks())
            creep.add_task({type: "taskless"});

        task_manager.run_task_queue(creep, creep.memory.task_queue);
    }
    cpu_debug("Recording total CPU usage.");
    cpu_tracker.record_main();

    var t4 = cpu_tracker.start("internal", "gc");
    gc.gc();
    cpu_tracker.stop(t4);

    cpu_debug("Main loop complete.");
    cpu_tracker.calculate();
}
