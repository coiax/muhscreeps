var genericActions = require('genericactions');
var roleHarvester = require('role.harvester');
var roleUpgrader = require('role.upgrader');
var roleBuilder = require('role.builder');
var roleCow = require('role.cow');
var roleGuard = require('role.guard');
var roleTower = require('role.tower');
var mother = require('mother');
var util = require('util');

module.exports.loop = function () {
    util.cpulog("+++");
    util.cpulog("Starting tick " + Game.time);
    util.cpulog("---");
    mother.run();
    if(typeof Memory.structures == 'undefined') {
        Memory.structures = {};
    }
    if(typeof Memory.cpu_use == 'undefined') {
        Memory.cpu_use = [];
    }
    for(var sid in Memory.structures) {
        if(!Game.structures[sid]) {
            delete Memory.structures[sid];
        }
    }
    for(var sid in Game.structures) {
        var structure = Game.structures[sid];
        if(!structure.isActive()) {
            continue;
        }
        var memory = structure.getMemory();
        var stype = structure.structureType;
        memory.type = stype;
        var tq = memory.task_queue;
        if(tq)
            util.run_task_queue(structure, tq);
        if(tq && tq.length) {
            continue;
        }
        if(stype == STRUCTURE_TOWER) {
            roleTower.run(structure);
        }
    }
    for(var name in Game.creeps) {
        var creep = Game.creeps[name];
        if(creep.spawning) {
            continue;
        }
        var dropped_energies = creep.room.find(FIND_DROPPED_ENERGY);
        dropped_energies.forEach(function(energy) {
            // might fail, just pickup anything if you can.
            creep.pickup(energy);
        });
        var tq = creep.memory.task_queue;
        if((creep.ticksToLive < 100) && creep.memory.recharge &&
            (!tq || (tq.length && (tq[0].type != "renew")))) {
            creep.add_task({type:"renew"});
        }
        util.run_task_queue(creep, tq)
        if(tq && tq.length) {
            // Do not fall back to roles if there are tasks in the task
            // queue.
            continue;
        }
        var role = creep.memory.role;
        util.cpulog("Running role(" + role + ") for " + creep);
        if(role == 'harvester') {
            roleHarvester.run(creep);
        }
        if(role == 'upgrader') {
            roleUpgrader.run(creep);
        }
        if(role == 'builder') {
            roleBuilder.run(creep);
        }
        if(role == 'cow') {
            roleCow.run(creep);
        }
        if(role == 'guard') {
            roleGuard.run(creep);
        }
        util.cpulog("Done role(" + role + ") for " + creep);
    }
    util.cpulog("---");
    util.cpulog("Ending tick " + Game.time);
    util.cpulog("+++");

    Memory.cpu_use.push({time: Game.time, use: Game.cpu.getUsed()});
    var avg = _.meanBy(Memory.cpu_use, _.property("time"));
    Memory.avg_cpu = avg;
    if(Memory.cpu_use.length > 100)
        Memory.cpu_use.splice(0, Memory.cpu_use.length - 100);
}
