require('prototype.creep');
require('prototype.structure');
require('prototype.room');
require('prototype.roomposition');
var gc = require('gc');
var cpu_tracker = require('cpu_tracker');
var genericActions = require('genericactions');
var roles = require('roles');
var mother = require('mother');
var util = require('util');

module.exports.loop = function () {
    gc.gc();
    mother.run();

    for(var roomName in Game.rooms) {
        var room = Game.rooms[roomName];
        room.scout_room();
    }

    for(var sid in Game.structures) {
        var structure = Game.structures[sid];
        if(!structure.isActive()) {
            continue;
        }
        var memory = structure.getMemory();
        var stype = structure.structureType;
        memory.type = stype;
        var tq = memory.task_queue;
        if(tq)
            genericActions.run_task_queue(structure, tq);
        if(tq && tq.length) {
            continue;
        }
        if(stype == STRUCTURE_TOWER) {
            roles['tower'].run(structure);
        }
    }
    for(var name in Game.creeps) {
        var creep = Game.creeps[name];
        if(creep.spawning) {
            continue;
        }
        var dropped_energies = creep.room.find(FIND_DROPPED_ENERGY);
        dropped_energies.forEach(function(energy) {
            // might fail, just pickup anything if you can.
            creep.pickup(energy);
        });
        // casual driveby repair.
        if(creep.carry.energy && !creep.memory.no_driveby_repair) {
            var damaged_structures = creep.pos.findInRange(FIND_STRUCTURES,
                3, {filter: util.is_damaged});
            creep.repair(_.sample(damaged_structures));
        }
        var tq = creep.memory.task_queue;
        if((creep.ticksToLive < 100) && creep.memory.recharge &&
            (!tq || (tq.length && (tq[0].type != "renew")))) {
            creep.add_task({type:"renew"});
        }
        genericActions.run_task_queue(creep, tq)
        if(tq && tq.length) {
            // Do not fall back to roles if there are tasks in the task
            // queue.
            continue;
        }
        var role = creep.memory.role;
        roles[creep.memory.role].run(creep);
    }

    cpu_tracker.record_main();
}
