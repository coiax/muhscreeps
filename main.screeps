require('loaded_modules');
var gc = require('gc');
var cpu_tracker = require('cpu_tracker');
var task_manager = require('task_manager');
var util = require('util');
var cpu_debug = util.cpu_debug;

module.exports.loop = function () {
    Memory.config.cpu_debug = true;
    var bucket = Game.cpu.bucket;
    if(bucket < 500) {
        console.log("Bucket is at " + bucket + ". Halting execution.");
        return;
    }
    if(Memory) {
        console.log("AAAAAAAAAAAAAAA");
        return;
    }
    var t1 = cpu_tracker.start("internal", "memory_decode");
    if(!Memory.config)
        Memory.config = {};
    cpu_tracker.stop(t1);

    if(typeof Memory.config.use_pathfinder === 'undefined')
        Memory.config.use_pathfinder = false;
    if(typeof Memory.config.cpu_debug === 'undefined')
        Memory.config.cpu_debug = false;
    if(typeof Memory.config.just_exit === 'undefined')
        Memory.config.just_exit = false;

    PathFinder.use(Memory.config.use_pathfinder);

    if(Memory.config.just_exit) {
        return;
    }

    cpu_debug("Start mainloop");

    var t2 = cpu_tracker.start("internal", "gc");
    gc.gc();
    cpu_tracker.stop(t2);

    var t3 = cpu_tracker.start("global", "scouting");
    for(var roomName in Game.rooms) {
        cpu_debug("Scouting " + roomName);
        var room = Game.rooms[roomName];
        room.scout_room();

        var has_spawns = room.find(FIND_MY_SPAWNS).length;
        var has_spawn_task = room.has_task_in_queue("room_spawn");
        if(has_spawns && !has_spawn_task)
            room.add_task("room_spawn");

        task_manager.run_task_queue(room);
    }
    cpu_tracker.stop(t3);

    for(var sid in Game.structures) {
        var structure = Game.structures[sid];
        var stype = structure.structureType;
        if(!structure.isActive())
            continue;

        cpu_debug("Running tasks for " + sid + "(" + stype + ")");
        if(!structure.has_tasks()) {
            switch(stype) {
                case STRUCTURE_TOWER:
                    structure.add_task("structure_tower");
                    break;
            }
        }
        task_manager.run_task_queue(structure);
    }
    for(var name in Game.creeps) {
        var creep = Game.creeps[name];
        cpu_debug("Running tasks for " + name);
        if(creep.spawning) {
            continue;
        }
        if(!creep.has_flag("no_autopickup")) {
            var dropped_energies = creep.room.find(FIND_DROPPED_ENERGY);
            for(var i = 0; i < dropped_energies.length; i++) {
                var energy = dropped_energies[i];
                creep.pickup(energy);
            }
        }
        // casual driveby repair.
        if(creep.carry.energy && !creep.has_flag("no_autorepair")) {
            var damaged_structures = creep.pos.findInRange(FIND_STRUCTURES,
                3, {filter: _.method("is_autorepairable")});
            damaged_structures = _.sortBy(damaged_structures,
                _.property("hits"));
            if(damaged_structures.length) {
                creep.repair(damaged_structures[0]);
            }
        }

        if(creep.wants_renew())
            creep.add_task("renew");

        if(!creep.has_tasks() && !creep.has_flag("no_autotask"))
            creep.add_task("taskless");

        task_manager.run_task_queue(creep);
    }
    cpu_debug("Recording total CPU usage.");
    cpu_tracker.record_main();

    var t4 = cpu_tracker.start("internal", "gc");
    gc.gc();
    cpu_tracker.stop(t4);

    cpu_debug("Main loop complete.");
    cpu_tracker.calculate();
};
