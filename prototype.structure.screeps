_.extend(Structure.prototype, require('mixin.log'));
_.extend(Structure.prototype, require('mixin.task_stack'));

Structure.prototype.get_memory = function() {
    if(!Memory.structures) {
        Memory.structures = {};
    }
    var mem = Memory.structures[this.id];
    if(mem) {
        return mem;
    } else {
        Memory.structures[this.id] = {};
        return Memory.structures[this.id];
    }
}

Structure.prototype.maintain_cost = function() {
    var decay = 0;
    var decay_time = 0;
    switch(this.structureType) {
        case STRUCTURE_CONTAINER:
            decay = CONTAINER_DECAY;
            if(this.room.controller && this.room.controller.owner) {
                decay_time = CONTAINER_DECAY_TIME_OWNED;
            } else {
                decay_time = CONTAINER_DECAY_TIME;
            }
            break;
        case STRUCTURE_RAMPART:
            decay = RAMPART_DECAY_AMOUNT;
            decay_time = RAMPART_DECAY_TIME;
            break;
        case STRUCTURE_ROAD:
            decay = ROAD_DECAY_AMOUNT;
            if(this.pos.is_swamp()) {
                decay *= CONSTRUCTION_COST_ROAD_SWAMP_RATIO;
            }
            decay_time = ROAD_DECAY_TIME;
            break;
    };
    if((decay == 0) || (decay_time == 0)) {
        return 0;
    }
    var hits_per_tick = decay / decay_time;
    var cost = hits_per_tick * REPAIR_COST;
    return cost;
};

Structure.prototype.is_type = function(stypes) {
    if(stypes.constructor != Array) {
        stypes = [stypes];
    }
    return _.includes(stypes, this.structureType);
};

Structure.prototype.is_full = function() {
    if(!this.isActive())
        return null;
    if(this.store) {
        var total = _.sum(this.store);
        return total == this.storeCapacity;
    } else {
        if(typeof this.energy == 'undefined')
            return null;
        if(typeof this.energyCapacity == 'undefined')
            return null;
        return this.energy == this.energyCapacity;
    }
};
