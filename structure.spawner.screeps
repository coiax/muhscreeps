var util = require('util');
var task_manager = require('task_manager');
var outcomes = task_manager.outcomes;

var default_parts = [];

function generate_default_parts() {
    var counter = 1;
    while(true) {
        var parts = [];
        var i;
        for (i = 0; i < counter; i++) {
            parts.push(WORK);
        }
        for (i = 0; i < counter; i++) {
            parts.push(CARRY);
        }
        for (i = 0; i < counter; i++) {
            parts.push(MOVE);
        }
        if(parts.length <= 50) {
            default_parts.push(parts);
            counter++;
            continue;
        } else {
            break;
        }
    }
}
generate_default_parts();

function build_creep(spawn, task_obj, initial_task_name) {
    var possible_parts;
    task_obj.currently_attempting = initial_task_name;

    var task_function = task_manager.get(initial_task_name);

    possible_parts = default_parts;
    if(task_function && task_function.parts) {
        possible_parts = task_function.parts;
    }

    var capacity = spawn.room.energyAvailable;

    var selected_parts;
    for(var i in possible_parts) {
        var partlist = possible_parts[i];
        var cost = util.body_cost(partlist);
        if(cost <= capacity) {
            selected_parts = partlist;
        } else {
            break;
        }
    }
    if(!selected_parts) {
        return;
    }
    var creep_name = initial_task_name.replace(".","_") + task_obj.creep_id;
    while(true) {
        var rc = spawn.canCreateCreep(selected_parts, creep_name);
        if(rc === OK) {
            task_obj.currently_spawning = initial_task_name;
            break;
        } else if(rc === ERR_NAME_EXISTS) {
            task_obj.creep_id++;
            continue;
        } else {
            return;
        }
    }
    task_obj.creep_id++;
    var creep_memory = {
        task_queue: [{type: initial_task_name}]
    };
    spawn.createCreep(selected_parts, creep_name, creep_memory);
    if(!spawn.memory.supported_creeps)
        spawn.memory.supported_creeps = [];
    spawn.memory.supported_creeps.push(creep_name);
}

function setup(task, spawn) {
    if (typeof task.creep_id === 'undefined') {
        task.creep_id = 1;
    }
    task.currently_attempting = null;
    if(!spawn.spawning) {
        task.currently_spawning = null;
    }
}

var default_required = [
    {task: "role_supplier", amount: 1},
    {task: "role_cow", amount: 1},
    {task: "role_upgrader", amount: 1},
    {task: "role_builder", amount: 1},
    {task: "role_cow", amount: 2},
    {task: "role_supplier", amount: 2},
    {task: "role_cow", amount: 3},
    {task: "role_supplier", amount: 3},
    {task: "role_cow", amount: 4},
    {task: "role_supplier", amount: 4},
    {task: "role_upgrader", amount: 3},
    {task: "role_builder", amount: 4},
    {task: "role_dumbscout", amount: 10},
    {task: "role_sentry", amount: 4},
    {task: "role_claimer", amount: 1}
];

function structure_spawner(task, spawn) {
    setup(task, spawn);
    spawn.check_creeps();
    var counts = {};
    var supported_creeps = spawn.memory.supported_creeps || [];

    if(!task.required)
        task.required = _.cloneDeep(default_required);

    for(var i in task.required) {
        var entry = task.required[i];
        if(typeof counts[entry.task] === 'undefined') {
            counts[entry.task] = 0;
            for(var j=0; j < supported_creeps.length; j++) {
                var creep = Game.creeps[supported_creeps[j]];
                if(creep.has_task_in_queue(entry.task))
                    counts[entry.task]++;
            }
        }
        if(counts[entry.task] < entry.amount) {
            build_creep(spawn, task, entry.task);
            break;
        }
    }

    return new outcomes.InProgress();
}

task_manager.register(structure_spawner);
