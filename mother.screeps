var roles = require('roles');
var util = require('util');

function creeps_of_role(role) {
    return _.filter(Game.creeps, function(c) {
        return c.memory.role == role;
    });
};

function build_creep(role_name) {
    var module = roles[role_name];
    var possible_parts = module.parts;
    if(!possible_parts)
        possible_parts = roles.default_parts;

    var spawn = Game.spawns['Spawn2']

    var creeps_in_room = spawn.room.find(FIND_MY_CREEPS).length;
    var capacity;
    if(creeps_in_room == 0) {
        capacity = spawn.room.energyAvailable;
    } else {
        capacity = spawn.room.energyCapacityAvailable;
    }
    var selected_parts;
    for(var i in possible_parts) {
        var partlist = possible_parts[i];
        var cost = util.body_cost(partlist);
        if(cost <= capacity) {
            selected_parts = partlist;
        } else {
            break;
        }
    }
    if(!selected_parts) {
        console.log("Part failure: " + role_name + ", budget:" + capacity);
        return;
    }
    if(spawn.canCreateCreep(selected_parts) != OK) {
        return;
    }
    var creep_name = role_name + Memory.muhid;
    Memory.muhid++;
    spawn.createCreep(selected_parts, creep_name, {role: role_name});
}

module.exports = {
    run : function() {
        if (typeof Memory.muhid == 'undefined') {
            Memory.muhid = 1;
        }
        // Mother; maintains population of colony.
        var priority = ['harvester', 'cow', 'upgrader', 'builder', 'guard'];
        var required = {
            'harvester': 2,
            'cow': 4,
            'upgrader': 3,
            'builder': 3,
            'guard': 3
        }
        for(var i in priority) {
            var role = priority[i];
            var current_amount = creeps_of_role(role).length;
            var required_amount = required[role];
            /*
            console.log(role + "|C:" + current_amount +
                "|R:" + required_amount);
            */
            if(current_amount < required[role]) {
                build_creep(role);
                break;
            }
        }
    }
}
