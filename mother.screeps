function creeps_of_role(role) {
    return _.filter(Game.creeps, function(c) {
        return c.memory.role == role;
    });
}

function build_creep(role) {
    var parts;
    var spawn = Game.spawns['Spawn2']
    var creeps_in_room = spawn.room.find(FIND_MY_CREEPS).length;
    var capacity;
    if(creeps_in_room == 0) {
        capacity = spawn.room.energyAvailable;
    } else {
        capacity = spawn.room.energyCapacityAvailable;
    }
    if(!parts && capacity >= 600) {
        if(role == "guard") {
            parts = [RANGED_ATTACK, RANGED_ATTACK, RANGED_ATTACK,
                    MOVE,MOVE,MOVE];
        } else {
            parts = [WORK,WORK,WORK,CARRY,CARRY,CARRY,MOVE,MOVE,MOVE];
        }
    }
    if(!parts && capacity >= 400) {
        if(role == "guard") {
            parts = [RANGED_ATTACK, RANGED_ATTACK, MOVE, MOVE];
        } else {
            parts = [WORK,WORK,CARRY,CARRY,MOVE,MOVE];
        }
    }
    if(!parts) {
        if(role == "guard") {
            parts = [RANGED_ATTACK, MOVE];
        } else {
            parts = [WORK,CARRY,MOVE];
        }
    }
    if(spawn.canCreateCreep(parts) != OK) {
        return;
    }
    var creep_name = role + Memory.muhid;
    Memory.muhid++;
    spawn.createCreep(parts, creep_name, {role: role});
}

module.exports = {
    run : function() {
        if (typeof Memory.muhid == 'undefined') {
            Memory.muhid = 1;
        }
        // Mother; maintains population of colony.
        for(var name in Memory.creeps) {
            if(!Game.creeps[name]) {
                delete Memory.creeps[name];
            }
        }
        var priority = ['harvester', 'cow', 'upgrader', 'builder', 'guard'];
        var required = {
            'harvester': 2,
            'cow': 4,
            'upgrader': 3,
            'builder': 3,
            'guard': 3
        }
        for(var role in priority) {
            var current_amount = creeps_of_role(role).length;
            var required_amount = required[role];
            console.log(role + "|C:" + current_amount +
                "|R:" + required_amount);
            if(current_amount < required[role]) {
                build_creep(role);
                break;
            }
        }
    }
}
